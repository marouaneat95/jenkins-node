"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _objectAssign = _interopRequireDefault(require("object-assign"));

var AttributesCacheInMemory = /*#__PURE__*/function () {
  function AttributesCacheInMemory() {
    this.attributesCache = {};
  }
  /**
   * Create or update the value for the given attribute
   *
   * @param {string} attributeName attribute name
   * @param {Object} attributeValue attribute value
   * @returns {boolean} the attribute was stored
   */


  var _proto = AttributesCacheInMemory.prototype;

  _proto.setAttribute = function setAttribute(attributeName, attributeValue) {
    this.attributesCache[attributeName] = attributeValue;
    return true;
  }
  /**
   * Retrieves the value of a given attribute
   *
   * @param {string} attributeName attribute name
   * @returns {Object?} stored attribute value
   */
  ;

  _proto.getAttribute = function getAttribute(attributeName) {
    return this.attributesCache[attributeName];
  }
  /**
   * Create or update all the given attributes
   *
   * @param {[string, Object]} attributes attributes to create or update
   * @returns {boolean} attributes were stored
   */
  ;

  _proto.setAttributes = function setAttributes(attributes) {
    this.attributesCache = (0, _objectAssign.default)(this.attributesCache, attributes);
    return true;
  }
  /**
   * Retrieve the full attributes map
   *
   * @returns {Map<string, Object>} stored attributes
   */
  ;

  _proto.getAll = function getAll() {
    return this.attributesCache;
  }
  /**
   * Removes a given attribute from the map
   *
   * @param {string} attributeName attribute to remove
   * @returns {boolean} attribute removed
   */
  ;

  _proto.removeAttribute = function removeAttribute(attributeName) {
    if (Object.keys(this.attributesCache).indexOf(attributeName) >= 0) {
      delete this.attributesCache[attributeName];
      return true;
    }

    return false;
  }
  /**
   * Clears all attributes stored in the SDK
   *
   */
  ;

  _proto.clear = function clear() {
    this.attributesCache = {};
    return true;
  };

  return AttributesCacheInMemory;
}();

var _default = AttributesCacheInMemory;
exports.default = _default;